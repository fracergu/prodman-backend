openapi: 3.0.0
info:
  title: Prodman API
  version: '1'
  description: This is the API documentation for Prodman, a production management tool.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:3000/api/v1
    description: Local server
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    LoginRequest:
      type: object
      properties:
        rememberMe:
          type: boolean
          description: Whether to remember the user or not
          example: true
    RegisterRequest:
      type: object
      properties:
        name:
          type: string
          description: The user's name
          example: John
        lastName:
          type: string
          description: The user's last name
          example: Doe
        username:
          type: string
          description: The user's username
          example: johndo3
        password:
          type: string
          description: The user's password
          example: Very$ecureP@ssword
    ConfigResponse:
      type: object
      properties:
        registerEnabled:
          type: boolean
          description: Whether registration is enabled or not
          example: true
        workerAutoTimeout:
          type: integer
          description: The timeout for the worker to automatically log out
          example: 60
        workerGetNextSubtask:
          type: boolean
          description: >-
            Whether the worker should get the next subtask or the whole list of
            subtasks
          example: true
    ConfigRequest:
      type: object
      properties:
        registerEnabled:
          type: boolean
          description: Whether registration is enabled or not
          example: true
        workerAutoTimeout:
          type: integer
          description: The timeout for the worker to automatically log out
          example: 60
        workerGetNextSubtask:
          type: boolean
          description: >-
            Whether the worker should get the next subtask or the whole list of
            subtasks
          example: true
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          description: The user's id
          example: 1
        username:
          type: string
          description: The user's username
          example: johndo3
        name:
          type: string
          description: The user's name
          example: John
        lastName:
          type: string
          description: The user's last name
          example: Doe
        role:
          type: string
          description: The user's role
          example: admin
        active:
          type: boolean
          description: Whether the user is active or not
          example: true
        createdAt:
          type: string
          format: date-time
          description: The user's creation date
          example: '2021-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          description: The user's update date
          example: '2021-01-01T00:00:00.000Z'
    UserCreationRequest:
      type: object
      properties:
        username:
          type: string
          description: The user's username
          example: johndo3
        name:
          type: string
          description: The user's name
          example: John
        lastName:
          type: string
          description: The user's last name
          example: Doe
        password:
          type: string
          description: The user's password
          example: Very$ecureP@ssword
        role:
          type: string
          description: The user's role
          example: admin
    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: The user's name
          example: John
        lastName:
          type: string
          description: The user's last name
          example: Doe
        role:
          type: string
          description: The user's role
          example: admin
        active:
          type: boolean
          description: Whether the user is active or not
          example: true
    UserCredentialsRequest:
      type: object
      properties:
        username:
          type: string
          description: The user's username
          example: johndo3
        password:
          type: string
          description: The user's password
          example: Very$ecureP@ssword
    CategoryResponse:
      type: object
      properties:
        id:
          type: integer
          description: The category's id
          example: 1
        name:
          type: string
          description: The category's name
          example: category 1
        description:
          type: string
          description: The category's description
          example: category 1 description
    CategoryRequest:
      type: object
      properties:
        name:
          type: string
          description: The category's name
          example: category 1
        description:
          type: string
          description: The category's description
          example: category 1 description
    ProductResponse:
      type: object
      properties:
        id:
          type: integer
          description: The product's id
          example: 1
        name:
          type: string
          description: The product's name
          example: Product 1
        description:
          type: string
          description: The product's description
          example: Product 1 description
        price:
          type: number
          description: The product's price
          example: 10.99
        reference:
          type: string
          description: The product's reference
          example: REF-001
        createdAt:
          type: string
          format: date-time
          description: The user's creation date
          example: '2021-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          description: The user's update date
          example: '2021-01-01T00:00:00.000Z'
        categories:
          type: array
          description: The product's categories
          items:
            schema: null
            $ref: '#/components/schemas/CategoryResponse'
        active:
          type: boolean
          description: The product's active status
          example: true
          default: true
        components:
          type: array
          description: The product's components
          items:
            type: object
            properties:
              product:
                type: object
                properties:
                  id:
                    type: integer
                    description: The component's product id
                    example: 2
                  name:
                    type: string
                    description: The component's product name
                    example: Product 2
                  description:
                    type: string
                    description: The component's product description
                    example: Product 2 description
                  price:
                    type: number
                    description: The component's product price
                    example: 10.99
                  reference:
                    type: string
                    description: The component's product reference
                    example: REF-002
                  createdAt:
                    type: string
                    format: date-time
                    description: The user's creation date
                    example: '2021-01-01T00:00:00.000Z'
                  updatedAt:
                    type: string
                    format: date-time
                    description: The user's update date
                    example: '2021-01-01T00:00:00.000Z'
              quantity:
                type: integer
                description: The quantity of the component
                example: 3
    ProductRequest:
      type: object
      properties:
        name:
          type: string
          description: The product's name
          example: Product 1
        description:
          type: string
          description: The product's description
          example: Product 1 description
        price:
          type: number
          format: float
          description: The product's price
          example: 10.99
        categories:
          type: array
          description: The product's category ids
          items:
            type: integer
            example: 1
        reference:
          type: string
          description: The product's reference
          example: REF-001
        active:
          type: boolean
          description: The product's active status
          example: true
          default: true
        components:
          type: array
          description: The product's components
          items:
            type: object
            properties:
              productId:
                type: integer
                description: The component's product id
                example: 2
              quantity:
                type: integer
                description: The quantity of the component
                example: 3
    SubtaskEvent:
      type: object
      properties:
        id:
          type: integer
        timestamp:
          type: string
          format: date-time
        quantityCompleted:
          type: integer
    Subtask:
      type: object
      properties:
        id:
          type: integer
        completed:
          type: boolean
        product:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
        quantity:
          type: integer
        status:
          type: string
          enum:
            - pending
            - completed
            - cancelled
        events:
          type: array
          items:
            $ref: '#/components/schemas/SubtaskEvent'
    TaskResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        percentageCompleted:
          type: number
          example: 0.5
        user:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: John
            lastName:
              type: string
              example: Doe
        createdAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00.000Z'
        notes:
          type: string
          example: Some notes
        subtasks:
          type: array
          items:
            $ref: '#/components/schemas/Subtask'
    SubtaskCreationRequest:
      type: object
      properties:
        productId:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 1
        status:
          type: string
          enum:
            - pending
            - completed
            - cancelled
          example: pending
    TaskCreationRequest:
      type: object
      properties:
        notes:
          type: string
          example: Some notes
        userId:
          type: integer
          example: 1
        status:
          type: string
          enum:
            - pending
            - completed
            - cancelled
          example: pending
        subtasks:
          type: array
          items:
            $ref: '#/components/schemas/SubtaskCreationRequest'
    ActiveWorkersResponse:
      type: array
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
    CompleteSubtaskRequest:
      type: object
      properties:
        quantityCompleted:
          type: integer
          description: The quantity of the subtask completed
          example: 3
    ProductionResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        timestamp:
          type: string
          format: date-time
          example: '2023-08-28T13:58:44.563Z'
        quantityCompleted:
          type: number
          example: 1
        subtask:
          type: object
          properties:
            id:
              type: integer
              example: 5
            quantity:
              type: integer
              example: 2
            order:
              type: integer
              example: 0
            status:
              type: string
              example: completed
            product:
              type: object
              properties:
                id:
                  type: integer
                  example: 43
                name:
                  type: string
                  example: Product 35
            task:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                status:
                  type: string
                  example: completed
                user:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 5
                    name:
                      type: string
                      example: Ana
                    lastName:
                      type: string
                      example: Alvarez
    ProductionReportResponse:
      type: object
      properties:
        generalStats:
          type: object
          properties:
            totalProduced:
              type: integer
              description: Total units produced.
            totalEmployees:
              type: integer
              description: Total number of unique employees.
            avgProductionPerEmployee:
              type: number
              description: Average production per employee.
            highProductionDays:
              type: array
              items:
                type: array
                items:
                  type: string
              description: List of days where production was higher than the average.
            employeeRanking:
              type: array
              items:
                type: array
                items:
                  type: string
              description: Ranking of employees by production quantity.
            employeesList:
              type: object
              additionalProperties:
                type: object
                properties:
                  name:
                    type: string
                  lastName:
                    type: string
            productsList:
              type: object
              additionalProperties:
                type: object
                properties:
                  name:
                    type: string
                  reference:
                    type: string
        byDay:
          type: object
          additionalProperties:
            type: integer
          description: Total production quantities grouped by day.
        byEmployee:
          type: object
          additionalProperties:
            type: integer
          description: Total production quantities grouped by employee ID.
        byProduct:
          type: object
          additionalProperties:
            type: integer
          description: Total production quantities grouped by product ID.
paths:
  /auth/login:
    post:
      operationId: login
      security:
        - basicAuth: []
      tags:
        - Auth
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful operation
        '401':
          description: Invalid credentials
        '500':
          description: Internal server error
  /auth/register:
    post:
      operationId: register
      security:
        - {}
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Created
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /auth/logout:
    delete:
      operationId: logout
      security:
        - {}
      tags:
        - Auth
      summary: Logout a user
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /auth/session:
    get:
      operationId: session
      tags:
        - Auth
      summary: Endpoint to check if session is active
      responses:
        '200':
          description: Successful operation
        '440':
          description: Login timeout
        '500':
          description: Internal server error
  /config:
    get:
      operationId: getConfig
      security:
        - {}
      tags:
        - Config
      summary: Get all configurations
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error
    put:
      operationId: updateConfig
      security:
        - {}
      tags:
        - Config
      summary: Update a configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /users:
    get:
      operationId: getUsers
      security:
        - {}
      tags:
        - Users
      summary: Get users with pagination and search
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Limit number of users returned
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: The current page number for results
        - in: query
          name: search
          schema:
            type: string
          description: Search term to filter users by name
        - in: query
          name: role
          schema:
            type: string
          description: Role term to filter users by role
        - in: query
          name: inactive
          schema:
            type: boolean
          description: Inactive term to filter users by active/inactive
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'
                  nextPage:
                    type: integer
                    nullable: true
                    example: null
                  prevPage:
                    type: integer
                    nullable: true
                    example: null
                  total:
                    type: integer
                    example: 1
        '400':
          description: Invalid input
        '500':
          description: Internal server error
    post:
      operationId: createUser
      security:
        - {}
      tags:
        - Users
      summary: Create a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreationRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input
        '500':
          description: Internal server error
  /users/{id}:
    put:
      operationId: updateUser
      security:
        - {}
      tags:
        - Users
      summary: Update a user
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input
        '404':
          description: User not found
        '500':
          description: Internal server error
  /users/{id}/credentials:
    put:
      operationId: updateUserCredentials
      security:
        - {}
      tags:
        - Users
      summary: Update user's username or password
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentialsRequest'
      responses:
        '200':
          description: Credentials updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input
        '404':
          description: User not found
        '500':
          description: Internal server error
  /products/categories:
    get:
      operationId: getCategories
      security:
        - {}
      tags:
        - Product categories
      summary: Get all categories
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Search term to filter categories by name or description
          example: category
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error
    post:
      operationId: createCategory
      security:
        - {}
      tags:
        - Product categories
      summary: Create a category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        '201':
          description: category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '400':
          description: Invalid input
        '500':
          description: Internal server error
  /products/categories/{id}:
    put:
      operationId: updateCategory
      security:
        - {}
      tags:
        - Product categories
      summary: Update a category
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: category ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        '200':
          description: category updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '400':
          description: Invalid input
        '404':
          description: category not found
        '500':
          description: Internal server error
    delete:
      operationId: deleteCategory
      security:
        - {}
      tags:
        - Product categories
      summary: Delete a category
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: category ID
      responses:
        '200':
          description: category deleted
        '400':
          description: Invalid input
        '404':
          description: category not found
        '500':
          description: Internal server error
  /products:
    get:
      operationId: getProducts
      security:
        - {}
      tags:
        - Products
      summary: Get products with pagination and search
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Limit number of products returned
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: The current page number for results
        - in: query
          name: search
          schema:
            type: string
          description: Search term to filter products by name
        - in: query
          name: category
          schema:
            type: integer
          description: category id to filter products by category
        - in: query
          name: inactive
          schema:
            type: boolean
          description: Filter inactive products
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductResponse'
                  nextPage:
                    type: integer
                    nullable: true
                  prevPage:
                    type: integer
                    nullable: true
        '400':
          description: Invalid input
        '500':
          description: Internal server error
    post:
      operationId: createProduct
      security:
        - {}
      tags:
        - Products
      summary: Create a product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Invalid input
        '500':
          description: Internal server error
  /products/{id}:
    put:
      operationId: updateProduct
      security:
        - {}
      tags:
        - Products
      summary: Update a product
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Invalid input
        '404':
          description: Product not found
        '500':
          description: Internal server error
    delete:
      operationId: deleteProduct
      security:
        - {}
      tags:
        - Products
      summary: Delete a product
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Product ID
      responses:
        '200':
          description: Product deleted
        '400':
          description: Invalid input
        '404':
          description: Product not found
        '500':
          description: Internal server error
  /tasks:
    get:
      operationId: getTasks
      security:
        - {}
      summary: Get tasks with optional filters
      tags:
        - Tasks
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: userId
          in: query
          required: false
          schema:
            type: string
        - name: completed
          in: query
          required: false
          schema:
            type: string
        - name: startDate
          in: query
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskResponse'
                  nextPage:
                    type: integer
                    nullable: true
                    example: null
                  prevPage:
                    type: integer
                    nullable: true
                    example: null
                  total:
                    type: integer
                    example: 1
        '400':
          description: Invalid input
        '500':
          description: Internal server error
    post:
      operationId: createTask
      security:
        - {}
      tags:
        - Tasks
      summary: Create a new task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreationRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Invalid request body
        '500':
          description: Internal server error
  /tasks/{taskId}:
    put:
      operationId: updateTask
      security:
        - {}
      tags:
        - Tasks
      summary: Update a task by ID
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreationRequest'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Invalid task ID
        '404':
          description: Not found
        '500':
          description: Internal server error'
    delete:
      operationId: deleteTask
      security:
        - {}
      tags:
        - Tasks
      summary: Delete a task by ID
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Task deleted successfully
        '400':
          description: Invalid task ID
        '404':
          description: Not found
        '500':
          description: Internal server error
  /worker/active:
    get:
      operationId: active
      tags:
        - Worker
      summary: Get all active workers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActiveWorkersResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /worker/task:
    get:
      operationId: task
      tags:
        - Worker
      summary: Get next task and subtasks
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /worker/completeSubtask:
    post:
      operationId: completeSubtask
      security:
        - {}
      tags:
        - Worker
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Subtask ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteSubtaskRequest'
      responses:
        '200':
          description: Subtask completed
        '400':
          description: Invalid input
        '404':
          description: Subtask not found
        '500':
          description: Internal server error
  /production:
    get:
      operationId: getProduction
      security:
        - {}
      tags:
        - Production
      summary: Get all productions
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 25
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: userId
          in: query
          required: false
          schema:
            type: integer
        - name: startDate
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: productId
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductionResponse'
                  nextPage:
                    type: integer
                    nullable: true
                    example: null
                  prevPage:
                    type: integer
                    nullable: true
                    example: null
                  total:
                    type: integer
                    example: 1
        '400':
          description: Invalid input
        '500':
          description: Internal server error
  /production/report:
    get:
      operationId: getProductionReport
      security:
        - {}
      tags:
        - Production
      summary: Generates a production report
      parameters:
        - name: userId
          in: query
          required: false
          schema:
            type: integer
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: productId
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductionReportResponse'
        '400':
          description: Invalid input
        '500':
          description: Internal server error
