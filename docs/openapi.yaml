openapi: 3.0.0
info:
  title: Prodman API
  version: '1'
  description: This is the API documentation for Prodman, a production management tool.

servers:
  - url: http://localhost:3000/api/v1
    description: Local server

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

  schemas:
    LoginRequest:
      type: object
      properties:
        rememberMe:
          type: boolean
          description: Whether to remember the user or not
          example: true
    RegisterRequest:
      type: object
      properties:
        name:
          type: string
          description: The user's name
          example: John
        lastName:
          type: string
          description: The user's last name
          example: Doe
        email:
          type: string
          description: The user's email
          example: johndoe@example.com
        password:
          type: string
          description: The user's password
          example: Very$ecureP@ssword
    ConfigRequest:
      type: object
      properties:
        key:
          type: string
          description: The key of the configuration
          example: 'configKey1'
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean
          description: The value of the configuration
          example: false
    ConfigResponse:
      type: object
      properties:
        key:
          type: string
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean
    UserCreationRequest:
      type: object
      properties:
        email:
          type: string
          description: The user's email
          example: johndoe@example.com
        name:
          type: string
          description: The user's name
          example: John
        lastName:
          type: string
          description: The user's last name
          example: Doe
        password:
          type: string
          description: The user's password
          example: Very$ecureP@ssword
        role:
          type: string
          description: The user's role
          example: admin
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          description: The user's id
          example: 1
        email:
          type: string
          description: The user's email
          example: johndoe@example.com
        name:
          type: string
          description: The user's name
          example: John
        lastName:
          type: string
          description: The user's last name
          example: Doe
        role:
          type: string
          description: The user's role
          example: admin
        active:
          type: boolean
          description: Whether the user is active or not
          example: true
        createdAt:
          type: string
          format: date-time
          description: The user's creation date
          example: '2021-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          description: The user's update date
          example: '2021-01-01T00:00:00.000Z'
    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: The user's name
          example: John
        lastName:
          type: string
          description: The user's last name
          example: Doe
        role:
          type: string
          description: The user's role
          example: admin
        active:
          type: boolean
          description: Whether the user is active or not
          example: true
    UserCredentialsRequest:
      type: object
      properties:
        email:
          type: string
          description: The user's email
          example: johndoe@example.com
        password:
          type: string
          description: The user's password
          example: Very$ecureP@ssword
    CategoryResponse:
      type: object
      properties:
        id:
          type: integer
          description: The category's id
          example: 1
        name:
          type: string
          description: The category's name
          example: Category 1
        description:
          type: string
          description: The category's description
          example: Category 1 description
    CategoryRequest:
      type: object
      properties:
        name:
          type: string
          description: The category's name
          example: Category 1
        description:
          type: string
          description: The category's description
          example: Category 1 description
    ProductResponse:
      type: object
      properties:
        id:
          type: integer
          description: The product's id
          example: 1
        name:
          type: string
          description: The product's name
          example: Product 1
        description:
          type: string
          description: The product's description
          example: Product 1 description
        price:
          type: number
          description: The product's price
          example: 10.99
        reference:
          type: string
          description: The product's reference
          example: REF-001
        createdAt:
          type: string
          format: date-time
          description: The user's creation date
          example: '2021-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          description: The user's update date
          example: '2021-01-01T00:00:00.000Z'
        categories:
          type: array
          description: The product's categories
          items:
            schema:
            $ref: '#/components/schemas/CategoryResponse'
        components:
          type: array
          description: The product's components
          items:
            type: object
            properties:
              product:
                type: object
                properties:
                  id:
                    type: integer
                    description: The component's product id
                    example: 2
                  name:
                    type: string
                    description: The component's product name
                    example: Product 2
                  description:
                    type: string
                    description: The component's product description
                    example: Product 2 description
                  price:
                    type: number
                    description: The component's product price
                    example: 10.99
                  reference:
                    type: string
                    description: The component's product reference
                    example: REF-002
                  createdAt:
                    type: string
                    format: date-time
                    description: The user's creation date
                    example: '2021-01-01T00:00:00.000Z'
                  updatedAt:
                    type: string
                    format: date-time
                    description: The user's update date
                    example: '2021-01-01T00:00:00.000Z'
              quantity:
                type: integer
                description: The quantity of the component
                example: 3
    ProductRequest:
      type: object
      properties:
        name:
          type: string
          description: The product's name
          example: Product 1
        description:
          type: string
          description: The product's description
          example: Product 1 description
        price:
          type: number
          format: float
          description: The product's price
          example: 10.99
        categories:
          type: array
          description: The product's category ids
          items:
            type: integer
            example: 1
        reference:
          type: string
          description: The product's reference
          example: REF-001
        components:
          type: array
          description: The product's components
          items:
            type: object
            properties:
              productId:
                type: integer
                description: The component's product id
                example: 2
              quantity:
                type: integer
                description: The quantity of the component
                example: 3
    TaskListResponse:
      type: 'object'
      properties:
        data:
          type: 'array'
          items:
            $ref: '#/components/schemas/TaskListItem'
        nextPage:
          type: 'integer'
          nullable: true
          example: null
        prevPage:
          type: 'integer'
          nullable: true
          example: null

    TaskResponse:
      type: 'object'
      properties:
        data:
          $ref: '#/components/schemas/TaskItem'

    TaskListItem:
      type: 'object'
      properties:
        id:
          type: 'integer'
          example: 1
        userName:
          type: 'string'
          example: 'John Doe'
        percentageCompleted:
          type: 'number'
          example: 0.5
        createdAt:
          type: 'string'
          format: 'date-time'
          example: '2021-01-01T00:00:00.000Z'
        notes:
          type: 'string'
          example: 'Some notes'
        subtasks:
          type: 'integer'
          example: 2

    TaskItem:
      type: 'object'
      properties:
        id:
          type: 'integer'
        user:
          $ref: '#/components/schemas/UserResponse'
        percentageCompleted:
          type: 'number'
        createdAt:
          type: 'string'
          format: 'date-time'
        subTasks:
          type: 'array'
          items:
            $ref: '#/components/schemas/SubTask'
    TaskCreateRequest:
      type: 'object'
      properties:
        notes:
          type: 'string'
          example: 'Some notes'
        userId:
          type: 'integer'
          example: 1
        status:
          type: 'string'
          enum: ['pending', 'completed', 'cancelled']
          example: 'pending'
        subTasks:
          type: 'array'
          items:
            $ref: '#/components/schemas/SubTaskCreateRequest'

    SubTaskCreateRequest:
      type: 'object'
      properties:
        productId:
          type: 'integer'
          example: 1
        quantity:
          type: 'integer'
          example: 1
        notes:
          type: 'string'
          example: 'Some notes'
        status:
          type: 'string'
          enum: ['pending', 'completed', 'cancelled']
          example: 'pending'

    SubTask:
      type: 'object'
      properties:
        id:
          type: 'integer'
        name:
          type: 'string'
        completed:
          type: 'boolean'
        product:
          $ref: '#/components/schemas/ProductResponse'
        quantity:
          type: 'integer'
        status:
          type: 'string'
          enum: ['pending', 'completed', 'cancelled']
        events:
          type: 'array'
          items:
            $ref: '#/components/schemas/SubTaskEvent'

    SubTaskEvent:
      type: 'object'
      properties:
        id:
          type: 'integer'
        date:
          type: 'string'
          format: 'date-time'
        quantityCompleted:
          type: 'integer'

paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login a user
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Successful operation
        401:
          description: Invalid credentials
        500:
          description: Internal server error
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        201:
          description: Created
        403:
          description: Forbidden
        500:
          description: Internal server error
  /auth/logout:
    delete:
      tags:
        - Auth
      summary: Logout a user
      responses:
        200:
          description: Successful operation
        500:
          description: Internal server error

  /config:
    get:
      tags:
        - Config
      summary: Get all configurations
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  registerEnabled:
                    type: boolean
        401:
          description: Unauthorized
        403:
          description: Forbidden
        500:
          description: Internal server error
    put:
      tags:
        - Config
      summary: Update a configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigRequest'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
        401:
          description: Unauthorized
        403:
          description: Forbidden
        500:
          description: Internal server error

  /users:
    get:
      tags:
        - Users
      summary: Get users with pagination and search
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Limit number of users returned
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: The current page number for results
        - in: query
          name: search
          schema:
            type: string
          description: Search term to filter users by name
        - in: query
          name: role
          schema:
            type: string
          description: Role term to filter users by role
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'
                  nextPage:
                    type: integer
                    nullable: true
                    example: null
                  prevPage:
                    type: integer
                    nullable: true
                    example: null
        400:
          description: Invalid input
        500:
          description: Internal server error

    post:
      tags:
        - Users
      summary: Create a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreationRequest'
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          description: Invalid input
        500:
          description: Internal server error
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get a user by id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: User ID
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          description: Invalid input
        404:
          description: User not found
        500:
          description: Internal server error
    put:
      tags:
        - Users
      summary: Update a user
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        200:
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          description: Invalid input
        404:
          description: User not found
        500:
          description: Internal server error
  /users/{id}/credentials:
    put:
      tags:
        - Users
      summary: Update user's email or password
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentialsRequest'
      responses:
        200:
          description: Credentials updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          description: Invalid input
        404:
          description: User not found
        500:
          description: Internal server error
  /products/categories:
    get:
      tags:
        - Product categories
      summary: Get all categories
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryResponse'
        401:
          description: Unauthorized
        403:
          description: Forbidden
        500:
          description: Internal server error
    post:
      tags:
        - Product categories
      summary: Create a category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        201:
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        400:
          description: Invalid input
        500:
          description: Internal server error
  /products/categories/{id}:
    put:
      tags:
        - Product categories
      summary: Update a category
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Category ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        200:
          description: Category updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        400:
          description: Invalid input
        404:
          description: Category not found
        500:
          description: Internal server error
    delete:
      tags:
        - Product categories
      summary: Delete a category
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Category ID
      responses:
        200:
          description: Category deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        400:
          description: Invalid input
        404:
          description: Category not found
        500:
          description: Internal server error
  /products:
    get:
      tags:
        - Products
      summary: Get products with pagination and search
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Limit number of products returned
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: The current page number for results
        - in: query
          name: search
          schema:
            type: string
          description: Search term to filter products by name
        - in: query
          name: category
          schema:
            type: integer
          description: Category id to filter products by category
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductResponse'
                  nextPage:
                    type: integer
                    nullable: true
                  prevPage:
                    type: integer
                    nullable: true
        400:
          description: Invalid input
        500:
          description: Internal server error
    post:
      tags:
        - Products
      summary: Create a product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        201:
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        400:
          description: Invalid input
        500:
          description: Internal server error

  /products/{id}:
    get:
      tags:
        - Products
      summary: Get a product by id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Product ID
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        400:
          description: Invalid input
        404:
          description: Product not found
        500:
          description: Internal server error
    put:
      tags:
        - Products
      summary: Update a product
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        200:
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        400:
          description: Invalid input
        404:
          description: Product not found
        500:
          description: Internal server error
  /tasks:
    get:
      summary: 'Get tasks with optional filters'
      tags:
        - 'Tasks'
      parameters:
        - name: 'limit'
          in: 'query'
          required: false
          schema:
            type: 'integer'
            default: 10
        - name: 'page'
          in: 'query'
          required: false
          schema:
            type: 'integer'
            default: 1
        - name: 'userId'
          in: 'query'
          required: false
          schema:
            type: 'string'
        - name: 'completed'
          in: 'query'
          required: false
          schema:
            type: 'string'
        - name: 'startDate'
          in: 'query'
          required: false
          schema:
            type: 'string'
            format: 'date'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'
        '404':
          description: 'Not found'

    post:
      tags:
        - 'Tasks'
      summary: 'Create a new task'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreateRequest'
      responses:
        '201':
          description: 'Task created successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'

  /tasks/{taskId}:
    get:
      tags:
        - 'Tasks'
      summary: 'Get a single task by ID'
      parameters:
        - name: 'taskId'
          in: 'path'
          required: true
          schema:
            type: 'integer'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '404':
          description: 'Task not found'

    put:
      tags:
        - 'Tasks'
      summary: 'Update a task by ID'
      parameters:
        - name: 'taskId'
          in: 'path'
          required: true
          schema:
            type: 'integer'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreateRequest'
      responses:
        '200':
          description: 'Task updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'

    delete:
      tags:
        - 'Tasks'
      summary: 'Delete a task by ID'
      parameters:
        - name: 'taskId'
          in: 'path'
          required: true
          schema:
            type: 'integer'
      responses:
        '204':
          description: 'Task deleted successfully'
